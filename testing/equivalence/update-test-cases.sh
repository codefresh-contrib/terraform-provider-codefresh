#!/bin/bash

source $(realpath $(dirname $0))/lib.sh

if [[ "$OSTYPE" == "darwin"* ]] && ! command -v grealpath &> /dev/null;
then
    print_style "ERROR: This script requires grealpath when run on Mac. Please install it with 'brew install coreutils'\n" "danger"
    exit 1
fi

test_case_dirname="test_cases"
test_case_prefix="test_"

if [[ ! -d ${test_case_dirname} ]]; then
    print_style "Creating test case directory"
    print_style "${test_case_dirname}" "info"
    print_style "...\n"
    mkdir -p ${test_case_dirname}
fi

for i in $(find $(dirname $(grealpath $0))/../../examples -mindepth 1 -maxdepth 1 -type d -not -path "**/.modules"); do
    print_style "Found example directory: "
    print_style "$(grealpath --relative-to=$(dirname $0) ${i})\n"
    expected_test_dir="$(dirname $(grealpath $0))/${test_case_dirname}/${test_case_prefix}$(basename ${i})"

    if [[ ! -d ${expected_test_dir} ]]; then
        mkdir -p ${expected_test_dir}
        print_style "  * created missing directory "
        print_style "$(grealpath --relative-to=$(dirname $0) ${expected_test_dir})\n" "warning"
    fi

    print_style "  * updating "
    print_style "$(grealpath --relative-to=$(dirname $0) ${expected_test_dir})/main.tf\n" "info"
    cat << EOF > ${expected_test_dir}/main.tf
# DO NOT EDIT
# This file is automatically generated by $(basename $0) 
module test {
    source = "../../../../examples/$(basename ${i})"
}
EOF

    print_style "  * updating "
    print_style "$(grealpath --relative-to=$(dirname $0) ${expected_test_dir})/spec.json\n" "info"
    cat << EOF > ${expected_test_dir}/spec.json
{
  "ignore_fields": {
    "plan.json": ["errored"]
  },
  "commands": [
    {
      "name": "init",
      "arguments": ["init", "-plugin-dir=../../.plugins"],
      "capture_output": false
    },
    {
      "name": "plan",
      "arguments": ["plan", "-out=equivalence_test_plan", "-no-color"],
      "capture_output": true,
      "output_file_name": "plan",
      "has_json_output": false
    },
    {
      "name": "state",
      "arguments": ["show", "-no-color"],
      "capture_output": true,
      "output_file_name": "state",
      "has_json_output": false
    },
    {
      "name": "show_state",
      "arguments": ["show", "-json"],
      "capture_output": true,
      "output_file_name": "state.json",
      "has_json_output": true,
      "streams_json_output": false
    },
    {
      "name": "show_plan",
      "arguments": ["show", "-json", "equivalence_test_plan"],
      "capture_output": true,
      "output_file_name": "plan.json",
      "has_json_output": true,
      "streams_json_output": false
    }
  ]
}
EOF
done
