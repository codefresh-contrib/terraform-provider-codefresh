version: "1.0"
stages:
  - clone
  - test
  - release
steps:
  main_clone:
    title: "Cloning main repository..."
    stage: clone
    type: git-clone
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_REVISION}}"
    git: cf_github

  go_fmt:
    title: "Formatting"
    stage: test
    image: goreleaser/goreleaser:v1.17.0
    commands:
      - go fmt

  go_test:
    title: "Run tests"
    stage: test
    image: golang:1.18.10-alpine3.17
    environment:
      - TF_ACC="test"
      - CGO_ENABLED=0
    commands:
      - go install github.com/warrensbox/terraform-switcher@0.13.1308
      - terraform-switcher --latest-stable ${TF_VERSION}
      - go test -v ./...
    retry:
      maxAttempts: 3
      delay: 5
      exponentialFactor: 2
    matrix:
      # The following will resolve to their latest patch version
      environment:
        - TF_VERSION=1.4.0
        - TF_VERSION=1.5.0
        - TF_VERSION=1.6.0

  equivalence_tests:
    title: "Run tests"
    stage: test
    image: golang:1.18.10-alpine3.17
    environment:
      - TF_VERSION=1.6.0
    commands:
      - apk update
      - apk add make
      - go install github.com/warrensbox/terraform-switcher@0.13.1308
      - terraform-switcher --latest-stable ${TF_VERSION}
      - apk add opentofu@1.6.0_alpha2-r0 --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing/
      - make equivalence
    retry:
      maxAttempts: 3
      delay: 5
      exponentialFactor: 2

  prepare_env_vars:
    title: "Preparing environment variables..."
    stage: release
    image: codefreshio/ci-helpers
    environment:
      - GPG_FINGERPRINT=${{GPG_FINGERPRINT}}
      - SIGNINGKEY=${{SIGNINGKEY}}
    commands:
      - source /get-token/get-gh-token.sh
      - cf_export GITHUB_TOKEN
      - cf_export GPG_FINGERPRINT
      - cf_export SIGNINGKEY
      - cf_export GPG_PRIVATE
    when:
      condition:
        all:
          release: "'${{RELEASE}}' == 'true'"

  release_binaries:
    title: Create release in Github
    image: goreleaser/goreleaser:v1.17.0
    stage: release
    environment:
      - GPG_FINGERPRINT=${{GPG_FINGERPRINT}}
      - SIGNINGKEY=${{SIGNINGKEY}}
      - GPG_PRIVATE=${{GPG_PRIVATE}}
    commands:
      - apk update
      - apk fetch gnupg
      - apk add gnupg
      - echo ${GPG_PRIVATE} | base64 -d > /tmp/private.key
      - gpg --import /tmp/private.key
      - git config user.signingkey ${GPG_FINGERPRINT}
      - git clean -fdx
      - goreleaser release --rm-dist
    when:
      condition:
        all:
          release: "'${{RELEASE}}' == 'true'"
